import { z } from 'zod'

const UserRole = z.enum(['ADMIN', 'USER', 'GUEST'])

export const userSchema = z.object({
  // We expect a UUId generated by the database (e.g., by Prisma or the DB itself).
//   id: z.uuid({ message: "Invalid UUId" }),

  email: z.email({ message: 'Invalid email address.' }),

  user_name: z.string().min(1).max(20),
  // 🔐 IMPORTANT: This is for validation, NOT for storage.
  // You should always HASH the password before saving it to a database.
  // password: z.string()
  //   .min(8, { message: 'Password must be at least 8 characters long.' })
  //   .regex(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/, {
  //     message: 'Password must contain at least one letter and one number.'
  //   }),
  password: z.string().min(1),

  //   role: UserRole.default('USER'), // Default role to 'USER' if not provided

  createdAt: z.date().default(() => new Date()),
  updatedAt: z.date().default(() => new Date())
})

export function validateRegister (data) {
  return userSchema.safeParse(data)
}
