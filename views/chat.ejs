<!DOCTYPE html>
<html lang='en'>

<head>
  <meta charset='UTF-8'>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
  <title>Whatsapp 2</title>

  <link rel='preconnect' href='https://fonts.googleapis.com'>
  <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin>
  <link href='https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap'
        rel='stylesheet'>
  <style>
    *, *::before, *::after { box-sizing: border-box; }
    :root { 
      --whatsapp-green: #25D366;
      --whatsapp-dark-green: #128C7E;
      --whatsapp-light-green: #DCF8C6;
      --whatsapp-gray: #f0f0f0;
      --whatsapp-dark-gray: #303030;
      --whatsapp-border: #e0e0e0;
    }
    
    body {
        margin: 0;
        font-family: 'Roboto', sans-serif;
        background: linear-gradient(to bottom, var(--whatsapp-dark-green) 0%, var(--whatsapp-dark-green) 130px, #dddbd1 130px, #d2dbdc 100%);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .app-container {
        display: flex;
        background: white;
        box-shadow: 0 2px 20px rgba(0,0,0,0.15);
        border-radius: 8px;
        overflow: hidden;
        width: 90vw;
        max-width: 1200px;
        height: 90vh;
        position: relative;
    }
    
    #chat {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: #f7f7f7;
        position: relative;
    }
    
    .chat-header {
        background: var(--whatsapp-green);
        color: white;
        padding: 15px 20px;
        display: flex;
        align-items: center;
        box-shadow: 0 2px 3px rgba(0,0,0,0.1);
    }
    
    .chat-header h3 {
        margin: 0;
        font-weight: 500;
    }
    
        #messages { 
        list-style-type: none; 
        margin: 0; 
        padding: 20px; 
        overflow-y: auto; 
        height: 100%; 
        scroll-behavior: smooth; 
        background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="0.5" fill="%23f0f0f0" opacity="0.3"/><circle cx="75" cy="75" r="0.5" fill="%23f0f0f0" opacity="0.3"/></pattern></defs><rect width="100" height="100" fill="%23e5ddd5"/><rect width="100" height="100" fill="url(%23grain)"/></svg>') repeat;
        flex: 1;
        display: flex;
        flex-direction: column;
    }
    
    #messages > li { 
        padding: 8px 12px; 
        margin: 5px 0;
        background: white;
        border-radius: 12px;
        max-width: 70%;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        position: relative;
        word-wrap: break-word;
        align-self: flex-start;
    }
    
    #messages > li.own-message { 
        background: var(--whatsapp-light-green);
        align-self: flex-end;
    }
    
    #messages > li { 
        padding: 8px 12px; 
        margin: 5px 0;
        background: white;
        border-radius: 12px;
        max-width: 70%;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        position: relative;
        word-wrap: break-word;
    }
    
    #messages > li:nth-child { 
        background: var(--whatsapp-light-green);
        align-self: flex-end;
        margin-left: auto;
    }
    
    #form { 
        background: #f0f0f0;
        display: flex; 
        height: 60px; 
        padding: 10px; 
        align-items: center;
        border-top: 1px solid var(--whatsapp-border);
    }
    
    #input { 
        border-radius: 20px; 
        border: 1px solid var(--whatsapp-border); 
        flex: 1; 
        margin-right: 10px; 
        padding: 12px 20px; 
        font-size: 14px;
        background: white;
        outline: none;
    }
    
    #input:focus { 
        border-color: var(--whatsapp-green);
    }
    
    #form > button { 
        background: var(--whatsapp-green); 
        color: white; 
        border: 0; 
        padding: 12px 20px;
        border-radius: 20px; 
        cursor: pointer;
        font-weight: 500;
        transition: background 0.2s;
    }
    
    #form > button:hover { 
        background: var(--whatsapp-dark-green); 
    }
    
    .sidebar {
        width: 300px;
        background: white;
        border-left: 1px solid var(--whatsapp-border);
        display: flex;
        flex-direction: column;
    }
    
    .sidebar-header {
        background: var(--whatsapp-gray);
        padding: 15px 20px;
        border-bottom: 1px solid var(--whatsapp-border);
    }
    
    .sidebar-header h3 {
        margin: 0;
        color: var(--whatsapp-dark-gray);
        font-size: 16px;
        font-weight: 500;
    }
    
    #usersList {
        list-style: none;
        padding: 0;
        margin: 0;
        flex: 1;
        overflow-y: auto;
    }
    
    #usersList li {
        padding: 15px 20px;
        border-bottom: 1px solid #f0f0f0;
        cursor: pointer;
        transition: background 0.2s;
        display: flex;
        align-items: center;
    }
    
    #usersList li:hover {
        background: #f5f5f5;
    }
    
    #usersList li::before {
        content: 'ðŸ‘¤';
        margin-right: 12px;
        font-size: 18px;
    }
    
    #logout {
        position: absolute;
        bottom: 20px;
        right: 20px;
        background: #ff4757;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 20px;
        cursor: pointer;
        font-weight: 500;
        box-shadow: 0 2px 10px rgba(255, 71, 87, 0.3);
        transition: all 0.2s;
        z-index: 1000;
    }
    
    #logout:hover {
        background: #ff3838;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 71, 87, 0.4);
    }
    
    /* Popup styles */
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }
    
    .popup-overlay.show {
        opacity: 1;
        visibility: visible;
    }
    
    .popup {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        text-align: center;
        min-width: 300px;
        transform: scale(0.7);
        transition: transform 0.3s ease;
    }
    
    .popup-overlay.show .popup {
        transform: scale(1);
    }
    
    .popup h3 {
        margin: 0 0 15px 0;
        color: var(--whatsapp-dark-gray);
        font-size: 18px;
    }
    
    .popup p {
        margin: 0 0 20px 0;
        color: #666;
        font-size: 14px;
    }
    
    .popup button {
        background: var(--whatsapp-green);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 20px;
        cursor: pointer;
        font-weight: 500;
        transition: background 0.2s;
    }
    
    .popup button:hover {
        background: var(--whatsapp-dark-green);
    }
    
    @media (max-width: 768px) {
        .app-container {
            width: 100vw;
            height: 100vh;
            border-radius: 0;
        }
        
        .sidebar {
            width: 250px;
        }
        
        #logout {
            bottom: 15px;
            right: 15px;
            padding: 10px 16px;
        }
        
        .popup {
            margin: 20px;
            min-width: auto;
            width: calc(100% - 40px);
        }
    }
  </style>

  <script type='module'>
    import { io } from 'https://cdn.socket.io/4.3.2/socket.io.esm.min.js';

    // Properly inject server-side userData into client-side JavaScript
    // it detects an error, but it works fine
    const userData = <%- JSON.stringify(userData) %>;
    let connectedUsers = [];
    let activeRoom = null
    let activeUser = null
    console.log(userData);
    console.log(activeRoom)
    console.log(activeUser)
    
    // Wait for the page to load before running the script
    document.addEventListener('DOMContentLoaded', () => {
      
      // if (!userData) {
      //   // If user is not logged in, redirect to the home/login page
      //   window.location.href = '/';
      //   return;
      // }

      const form = document.getElementById('form');
      const input = document.getElementById('input');
      const messages = document.getElementById('messages');
      const logout = document.getElementById('logout');
      const usersListElement = document.getElementById('usersList');
      const popupOverlay = document.getElementById('popupOverlay');
      const popupCloseBtn = document.getElementById('popupCloseBtn');

      const socket = io({
        auth: {
          // 3. Use the username from the injected userData object
          userID: userData.id,
          user_name: userData.user_name,
          serverOffset: 0,
        }
      });
      
      socket.onAny((event, ...args) => {
        console.log(event, args);
      });

      socket.on("users", (users) => {
        if (users) {
          connectedUsers = users
          renderUsers();
        } else {
          console.log('No users data or users is not an array:', users);
        }
      })

      socket.on("user connected", (user) => {
        connectedUsers.push(user)
        //renderUsers()
      })

      socket.on('chat message', ({ content, from, to }) => {
          const listItem = document.createElement('li');
          listItem.innerHTML = `<strong>${from}:</strong> ${content}`;
          //socket.auth.serverOffset = serverOffset;

          // Add 'own-message' class if the message is from the current user
          if (from === userData.user_name) {
            listItem.classList.add('own-message');
          }
          
          messages.appendChild(listItem);
          messages.scrollTop = messages.scrollHeight;
      });

      form.addEventListener('submit', (e) => {
          e.preventDefault();

          if (!activeRoom) {
            showPopup();
            return;
          }
          if (input.value) {
              // 4. Use the authenticated username when emitting a message
              socket.emit('chat message', { msg: input.value, room: activeRoom, reciever:  activeUser, sender: userData.id } );
              input.value = '';
          }
      });

      logout.addEventListener('click', (e) => {
        e.preventDefault();

        fetch('/logout', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          }
        })
        .then(res => {
            console.log(res)
            window.location.href = ('/')
        })
      })

      // Event delegation for dynamically created user elements
      usersListElement.addEventListener('click', (e) => {
        if (e.target.classList.contains('userChat')) {
          e.preventDefault()

          messages.innerHTML = ''

          const userRecievingID = e.target.dataset.userID
          console.log(userRecievingID)
          console.log(userData.id)
          const ids = [userRecievingID, userData.id]
          ids.sort()
          const roomID = ids.join('-')
          activeRoom = roomID
          activeUser = userRecievingID
          console.log(`Chat con ${activeUser} selected. Using room ${activeRoom}`)

          socket.emit('joinRoom', { room: roomID , users: ids })
        }
      })

      // Popup functions
      function showPopup() {
        popupOverlay.classList.add('show');
      }

      function hidePopup() {
        popupOverlay.classList.remove('show');
      }

      // Close popup when clicking the close button
      popupCloseBtn.addEventListener('click', hidePopup);

      // Close popup when clicking outside of it
      popupOverlay.addEventListener('click', (e) => {
        if (e.target === popupOverlay) {
          hidePopup();
        }
      });

      // Close popup with Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && popupOverlay.classList.contains('show')) {
          hidePopup();
        }
      });

      function renderUsers() {
        // Clear existing users to prevent duplicates
        usersListElement.innerHTML = '';
        
        connectedUsers.forEach(u => {
          const user = document.createElement('li');
          user.dataset.userID = u.userID
          user.classList.add('userChat')
          user.textContent = u.user_name;
          console.log('Adding user:', u.user_name);
          usersListElement.appendChild(user);
        })
      }
    });
  </script>
</head>

<body>
  <div class="app-container">
    <section id='chat'>
      <div class="chat-header">
        <h3>Chat Room</h3>
      </div>
      <ul id='messages'></ul>
      <form id='form'>
        <input type='text' name='message' id='input' placeholder='Type a message...' autocomplete='off' />
        <button type='submit'>Send</button>
      </form>
    </section>
    
    <div class="sidebar">
      <div class="sidebar-header">
        <h3>Online Users</h3>
      </div>
      <ul id="usersList"></ul>
    </div>
  </div>
  
  <button id='logout'>Logout</button>

  <!-- Popup for "Please select a chat" -->
  <div id="popupOverlay" class="popup-overlay">
    <div class="popup">
      <h3>No Chat Selected</h3>
      <p>Please select a user from the sidebar to start chatting.</p>
      <button id="popupCloseBtn">OK</button>
    </div>
  </div>
</body>

</html>